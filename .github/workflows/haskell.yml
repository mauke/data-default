name: Haskell CI

on: [push, pull_request]

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        ghc-version:
          - '9.10'
          - '9.8'
          - '9.6'
          - '9.4'
          - '9.2'
          - '9.0'
          - '8.10'
          - '8.8'
          - '8.6'
          - '8.4'
          - '8.2'
          - '8.0'
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            ghc-version: '7.10'
          - os: macos-latest
            ghc-version: '9.10'

    runs-on: ${{matrix.os}}
    name: Test w/ ghc ${{matrix.ghc-version}} on ${{matrix.os}}

    steps:
    - uses: actions/checkout@v4
    - uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{matrix.ghc-version}}
      name: set up ghc
      id: setup

    - name: configure
      run: |
        cabal configure --enable-tests
        cabal build all --dry-run

    - name: restore cabal cache
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      # If we had an exact cache hit, the dependencies will be up to date.
      if: steps.cache.outputs.cache-hit != 'true'
      run: cabal build all --only-dependencies

    - name: save cabal cache
      uses: actions/cache/save@v4
      # If we had an exact cache hit, trying to save the cache would error because of key clash.
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: build
      run: cabal build all

    - name: test
      run: cabal test all

    - name: check
      shell: bash
      run: |
        for i in */*.cabal; do
          ( cd "${i%/*}" && cabal check ) || break
        done

    - name: documentation
      run: cabal haddock all
